Reasons for using React
- Code reusability with React components
- Ease of frontend development
- Using Virtual DOM, even large React apps are performant.
- Convenient JSX syntax
- We can do client side state management using Redux.
- Build tools makes maintenance of code so much easier.
- Using well tested React libraries we also take care of the security concerns.


2 ways to create React applications

1. Simple React application: 
	- Here we keep things simple and just use HTML, CSS and JS/JSX
	- We import the 3 libraries(React, ReactDOM and Babel for JSX)
2. Complex React applications:
	- Here we use build tools like create-react-app, webpack, cssLoaders, styleLoaders, transpiler (babel),minifies, compression libraries.
	- Here we utilize nodejs to facilitate the development and it monitors the changes and apllies them dynamically.
	
	
Why it is important to mention unique keys when creating multpile React components using a loop?
- So that React can uniquely identiy the list items.

What is special about React Form?
Controlled components during form submit.


- What are React Hooks?
Hooks are functions that let you “hook into” React state and lifecycle features from function components. Hooks don’t work inside classes — they let you use React without classes.


- Why React Hooks?
Classes vs Hooks example: https://blog.bitsrc.io/6-reasons-to-use-react-hooks-instead-of-classes-7e3ee745fe04

- When to use React Hooks?
https://stackoverflow.com/questions/58374623/when-to-use-react-hooks


- What are 2 important rules of Hooks in React?
- Hooks are JavaScript functions, but they impose two additional rules:
    1. Only call Hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions.
    2. Only call Hooks from React function components. Don’t call Hooks from regular JavaScript functions. (There is just one other valid place to call Hooks — your own custom Hooks. We’ll learn about them in a moment.)

- Built-in hooks 
    - useState()
    - useEffect(): https://reactjs.org/docs/hooks-effect.html
    - useContext()


What does useEffect do? 
By using this Hook, you tell React that your component needs to do something after render. React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates.

Does useEffect run after every render? 
Yes! By default, it runs both after the first render and after every update.

Why do we return a function from our useEffect callback? 
This is the optional cleanup mechanism for effects. Every effect may return a function that cleans up after it. This lets us keep the logic for adding and removing subscriptions close to each other. They’re part of the same effect!

what is the use of second optional argument in useEffect() function?
In some cases, cleaning up or applying the effect after every render might create a performance problem. You can tell React to skip applying an effect if certain values haven’t changed between re-renders. To do so, pass an array as an optional second argument to useEffect.


Why use React Router?
React routees help to configure propery url paths for our React SPA

https://reactrouter.com/docs/en/v6/getting-started/installation



When to use State management in front end application?
When front application grows big and communicating across components regarding the changed data  becomes challenging then it makes sense to use something like Redux.

What's the benefit of using Redux?
- Single source of truth
- On data changes in store, all the subscribed components are notified of the new changes thus they re-render with latest data.
- Development becomes very easy when using redux and the redux-dev-tools chrome extension.

How Redux works?
https://react-redux.js.org/api/hooks

https://d33wubrfki0l68.cloudfront.net/01cc198232551a7e180f4e9e327b5ab22d9d14e7/b33f4/assets/images/reduxdataflowdiagram-49fa8c3968371d9ef6f2a1486bd40a26.gif




What's the use of event.preventDefaults() in onSubmitHandlers of form?
It prevents the default behaviour of submit button and this prevents page refresh.


How does onChange event works for <input> in React?
Every type the new input is entered by the user it fires a change event using which we capture the new user entered data.



Does React provide direct access to DOM? If yes How?
We can create refs and use it to access the actual DOM for that HTML Element.
https://reactjs.org/docs/forwarding-refs.html


What are the situations where you would need to access DOM directly?
- When need to add onBlur/onFocus capability to non-input html elements like a Div.


Why to create a custom Hook ?
DRY

What is a custom Hook?
It's just function with 'use' as prefi in it's name and,
It may utlize other hooks inside it.
